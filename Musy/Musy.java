/* Musy.java */
/* Generated By:JavaCC: Do not edit this line. Musy.java */
import jm.JMC;
import jm.music.data.*;
import jm.util.*;

public class Musy implements MusyConstants {
    public static void main(String[] args) throws ParseException{
        try {
            Musy parser = new Musy(System.in);
            parser.start();
            System.out.println("Syntax correct!");
        }
        catch (ParseException e){
            System.out.println(e.getMessage());
        }
    }

  final public void start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:
      case COMP:
      case PLAY:
      case ADDN:
      case NEWS:
      case NEWP:
      case TEMPO:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      expression();
    }
  }

  final public void expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMP:{
      composeSong();
      break;
      }
    case PLAY:{
      playSong();
      break;
      }
    case NEWP:{
      createPhrase();
      break;
      }
    case ADDN:{
      addNotesToPhrase();
      break;
      }
    case NEWS:{
      createSong();
      break;
      }
    case TEMPO:{
      setTempo();
      break;
      }
    case 0:{
      jj_consume_token(0);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*void variableDefinition():
{}
{
    <PART> <ID> <COLON> <ID> (<PIPE> <ID>)*
    {System.out.println("Variable Defined!\n");}
}*/

/*void variableAssignment():
{}
{
    <ID> <COLON> <ID>
    {System.out.println("Variable Assigned!\n");}
}*/
  final public 


void composeSong() throws ParseException {
    jj_consume_token(COMP);
    jj_consume_token(COLON);
    jj_consume_token(ID);
Intermediate.exportMidi();
     System.out.println("Song has been written in a file!");
  }

  final public void playSong() throws ParseException {
    jj_consume_token(PLAY);
    jj_consume_token(COLON);
    jj_consume_token(ID);
Intermediate.playSong();
     System.out.println("Song will now be played!");
  }

/*void displayDetails():
{}
{   
    <DISP> <COLON> <ID>
    {System.out.println("Details of the Song are being displayed!");}
}*/
  final public 
void addNotesToPhrase() throws ParseException {Token a, b, c;
    jj_consume_token(ADDN);
    a = jj_consume_token(TONE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EIGHT:{
      b = jj_consume_token(EIGHT);
      break;
      }
    case QUARTER:{
      b = jj_consume_token(QUARTER);
      break;
      }
    case HALF:{
      b = jj_consume_token(HALF);
      break;
      }
    case WHOLE:{
      b = jj_consume_token(WHOLE);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(TO);
    c = jj_consume_token(ID);
new Intermediate();
     Intermediate.createNote(a.image, b.image , c.image);
     System.out.println("Note added to \u005c"" + c.image + "\u005c" !");
  }

  final public void createPhrase() throws ParseException {Token a;
    jj_consume_token(NEWP);
    jj_consume_token(COLON);
    a = jj_consume_token(ID);
Intermediate.createPhrase(a.image);
     System.out.println("Phrase \u005c"" + a.image + "\u005c" Created!");
  }

  final public void createSong() throws ParseException {Token a;
    jj_consume_token(NEWS);
    jj_consume_token(COLON);
    a = jj_consume_token(ID);
Intermediate.createSong(a.image);
     System.out.println("Song \u005c"" + a.image + "\u005c" Created!");
  }

  final public void setTempo() throws ParseException {Token a;
    jj_consume_token(TEMPO);
    jj_consume_token(COLON);
    a = jj_consume_token(NUMBER);
Intermediate.setTempo(a.image);
     System.out.println("Tempo set to " + a.image + " !");
  }

  /** Generated Token Manager. */
  public MusyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3c01401,0x3c01401,0x3c0,};
   }

  /** Constructor with InputStream. */
  public Musy(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Musy(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MusyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Musy(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MusyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Musy(MusyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MusyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
